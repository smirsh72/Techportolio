document.addEventListener('DOMContentLoaded', () => {
  // Immediately set up the changing word
  setTimeout(() => {
    const changingWord = document.getElementById('changing-word');
    if (changingWord) {
      // Apply styles directly
      changingWord.style.opacity = '1';
      changingWord.style.visibility = 'visible';
      changingWord.style.display = 'inline-block';
      
      // Apply gradient directly
      changingWord.style.background = 'linear-gradient(90deg, #8b5cf6, #ec4899, #facc15)';
      changingWord.style.backgroundSize = '200% auto';
      changingWord.style.backgroundClip = 'text';
      changingWord.style.webkitBackgroundClip = 'text';
      changingWord.style.webkitTextFillColor = 'transparent';
    }
  }, 100);
  // DOM Elements
  const loadingScreen = document.querySelector('#loading-screen');
  const hero = document.querySelector('.hero');
  const changingWord = document.querySelector('#changing-word');
  const wordCarousel = document.querySelector('.word-carousel');
  const tagline = document.querySelector('#tagline-text');
  const ctaButton = document.querySelector('#cta-button');
  const scrollIndicator = document.querySelector('.scroll-indicator');
  const particlesContainer = document.querySelector('.particles-container');
  
  // Variables for word cycling
  const roles = ['Shan Irshad', 'A Developer', 'A Designer', 'A Cloud Dev', 'A Builder'];
  const wordDisplayDuration = 3000; // Display each word for 3 seconds
  const wordTransitionDuration = 800; // ms for fade in/out animation (matches CSS)
  
  // Create sparkles
  createSparkles();
  
  // Function to create sparkle elements
  function createSparkles() {
    const particlesContainer = document.getElementById('particles');
    const maxSparkles = 5; // Maximum number of sparkles at once
    
    // Create initial sparkles
    for (let i = 0; i < maxSparkles; i++) {
      createSparkle();
    }
    
    // Function to create a single sparkle
    function createSparkle() {
      const sparkle = document.createElement('div');
      sparkle.classList.add('sparkle');
      
      // Random position within the container
      const posX = Math.random() * 100;
      const posY = Math.random() * 100;
      sparkle.style.left = `${posX}%`;
      sparkle.style.top = `${posY}%`;
      
      // Random size (1-3px)
      const size = 1 + Math.random() * 2;
      sparkle.style.width = `${size}px`;
      sparkle.style.height = `${size}px`;
      
      // Random animation delay
      const delay = Math.random() * 5;
      sparkle.style.animationDelay = `${delay}s`;
      
      // Add to container
      particlesContainer.appendChild(sparkle);
      
      // Remove and recreate after animation completes
      setTimeout(() => {
        sparkle.remove();
        createSparkle();
      }, 8000 + (delay * 1000)); // Match animation duration plus delay
    }
  }
  
  // Initialize loading sequence
  initializeLoadingSequence();
  
  // Loading sequence function
  function initializeLoadingSequence() {
    // Hide hero section initially
    hero.style.opacity = '0';
    tagline.style.opacity = '0';
    tagline.style.transform = 'translateY(20px)';
    ctaButton.style.opacity = '0';
    ctaButton.style.transform = 'translateY(20px)';
    scrollIndicator.style.opacity = '0';
    
    // Start the loading screen animation
    animateLoadingScreen();
  }
  
  // Handle loading screen animation
  function animateLoadingScreen() {
    // Show loading screen immediately
    loadingScreen.style.display = 'flex';
    loadingScreen.style.opacity = '1';
    
    // Get terminal elements
    const etherealTerminal = document.querySelector('.ethereal-terminal');
    const etherealWelcome = document.querySelector('.ethereal-welcome');
    const terminalLines = document.querySelectorAll('.terminal-line');
    const commandLines = document.querySelectorAll('.terminal-line .command');
    const outputLines = document.querySelectorAll('.terminal-line.output');
    const cursorLine = document.querySelector('.terminal-line.cursor-line');
    
    // Hide all command and output lines initially
    terminalLines.forEach(line => {
      if (!line.classList.contains('cursor-line')) {
        line.style.opacity = '0';
        line.style.display = 'none';
      }
    });
    
    // Terminal animation sequence
    let currentLineIndex = 0;
    const totalCommandLines = commandLines.length;
    
    // Start the terminal animation
    startTerminalAnimation();
    
    // Function to animate typing a command with ultra-fluid motion
    function typeCommand(commandElement, text, callback) {
      const parent = commandElement.parentElement;
      parent.style.display = 'block';
      parent.style.opacity = '1';
      
      let i = 0;
      commandElement.textContent = '';
      
      // Slightly slower typing for readability
      const getTypingSpeed = () => Math.random() * 5 + 20;
      
      const typingInterval = setInterval(() => {
        if (i < text.length) {
          commandElement.textContent += text.charAt(i);
          i++;
        } else {
          clearInterval(typingInterval);
          if (callback) setTimeout(callback, 100); // Slightly longer pause after typing
        }
      }, getTypingSpeed());
    }
    
    // Function to show output line with ultra-fluid display
    function showOutput(outputElement, callback) {
      outputElement.style.display = 'block';
      outputElement.style.opacity = '0';
      outputElement.style.transition = 'opacity 0.3s ease-out';
      requestAnimationFrame(() => {
        outputElement.style.opacity = '1';
        if (callback) setTimeout(callback, 150); // Allow output to be visible longer
      });
    }
    
    // Start the terminal animation sequence with ultra-fluid continuous flow
    function startTerminalAnimation() {
      // Show cursor briefly then start commands
      if (cursorLine) {
        // Quick cursor blink - barely visible
        cursorLine.style.display = 'block';
        cursorLine.style.opacity = '0.7';
        
        // Start first command almost instantly
        requestAnimationFrame(() => {
          // Hide cursor as we start typing
          cursorLine.style.opacity = '0';
          
          // Begin first command with no delay
          if (commandLines[0]) {
            typeCommand(commandLines[0], 'initialize', () => {
              if (outputLines[0]) {
                showOutput(outputLines[0], () => {
                  // Second command
                  if (commandLines[1]) {
                    typeCommand(commandLines[1], 'load_portfolio', () => {
                      if (outputLines[1]) {
                        showOutput(outputLines[1], () => {
                          // Third command
                          if (commandLines[2]) {
                            typeCommand(commandLines[2], 'display_welcome', () => {
                              if (outputLines[2]) {
                                showOutput(outputLines[2], () => {
                                  // Fourth command
                                  if (commandLines[3]) {
                                    typeCommand(commandLines[3], 'launch', () => {
                                      if (outputLines[3]) {
                                        showOutput(outputLines[3], () => {
                                          // Fifth command
                                          if (commandLines[4]) {
                                            typeCommand(commandLines[4], 'animate', () => {
                                              if (outputLines[4]) {
                                                showOutput(outputLines[4], () => {
                                                  setTimeout(completeTerminalAnimation, 100);
                                                });
                                              } else {
                                                setTimeout(completeTerminalAnimation, 100);
                                              }
                                            });
                                          } else {
                                            setTimeout(completeTerminalAnimation, 100);
                                          }
                                        });
                                      } else {
                                        setTimeout(completeTerminalAnimation, 100);
                                      }
                                    });
                                  } else {
                                    setTimeout(completeTerminalAnimation, 100);
                                  }
                                });
                              } else {
                                setTimeout(completeTerminalAnimation, 100);
                              }
                            });
                          } else {
                            setTimeout(completeTerminalAnimation, 100);
                          }
                        });
                      } else {
                        setTimeout(completeTerminalAnimation, 100);
                      }
                    });
                  } else {
                    setTimeout(completeTerminalAnimation, 100);
                  }
                });
              } else {
                setTimeout(completeTerminalAnimation, 100);
              }
            });
          } else {
            setTimeout(completeTerminalAnimation, 100);
          }
        }, 0);
      } else {
        // If no cursor line, start the animation directly
        if (commandLines[0]) {
          setTimeout(() => {
            typeCommand(commandLines[0], 'initialize', () => {
              if (outputLines[0]) {
                showOutput(outputLines[0], () => {
                  setTimeout(completeTerminalAnimation, 100);
                });
              } else {
                setTimeout(completeTerminalAnimation, 100);
              }
            });
          }, 0);
        } else {
          setTimeout(completeTerminalAnimation, 100);
        }
      }
    }
    
    // Complete terminal animation and transition to welcome screen with smooth, natural motion
    function completeTerminalAnimation() {
      // Add subtle cursor blink at the end
      if (cursorLine) {
        cursorLine.style.display = 'block';
        cursorLine.style.opacity = '0';
        cursorLine.style.transition = 'opacity 0.5s ease-in-out';
        
        // Gentle fade-in of cursor line
        requestAnimationFrame(() => {
          cursorLine.style.opacity = '0.7';
          
          // Pulse the cursor a few times with natural timing
          let pulseCount = 0;
          const cursorPulse = setInterval(() => {
            cursorLine.style.opacity = pulseCount % 2 === 0 ? '0' : '0.7';
            pulseCount++;
            
            if (pulseCount >= 3) {
              clearInterval(cursorPulse);
              
              // Proceed to next animation step after cursor blinks with a natural pause
              setTimeout(() => {
                // Smooth fade transition for terminal
                if (etherealTerminal) {
                  etherealTerminal.style.opacity = '0';
                  etherealTerminal.style.transform = 'translateY(-15px)';
                  etherealTerminal.style.transition = 'opacity 1.2s ease-out, transform 1.2s cubic-bezier(0.19, 1, 0.22, 1)';
                }
                
                // Wait for terminal to fully fade before showing welcome
                setTimeout(() => {
                  if (etherealWelcome) {
                    // Prepare welcome message with initial state
                    etherealWelcome.style.display = 'flex';
                    etherealWelcome.style.opacity = '0';
                    etherealWelcome.style.transform = 'translateY(15px)';
                    etherealWelcome.style.transition = 'opacity 1s ease-in-out, transform 1s cubic-bezier(0.19, 1, 0.22, 1)';
                    
                    // Show welcome message with elegant animation
                    requestAnimationFrame(() => {
                      etherealWelcome.style.opacity = '1';
                      etherealWelcome.style.transform = 'translateY(0)';
                      
                      // Allow welcome message to be fully visible before preparing hero
                      setTimeout(() => {
                        // Prepare hero section
                        if (hero) {
                          hero.style.display = 'flex';
                          hero.style.opacity = '0';
                          hero.style.transform = 'translateY(20px)';
                          hero.style.transition = 'opacity 0.6s ease-out, transform 0.6s cubic-bezier(0.19, 1, 0.22, 1)';
                        }
                        
                        // Allow hero to be prepared before starting transitions
                        setTimeout(() => {
                          if (loadingScreen) {
                            loadingScreen.style.opacity = '0';
                            loadingScreen.style.transition = 'opacity 1s ease-out';
                          }
                          if (etherealWelcome) {
                            etherealWelcome.style.opacity = '0';
                            etherealWelcome.style.transition = 'opacity 1s ease-out';
                          }
                          if (hero) {
                            hero.style.opacity = '1';
                            hero.style.transform = 'translateY(0)';
                          }
                          
                          // Wait for transitions to complete before showing hero elements
                          setTimeout(() => {
                            if (loadingScreen) {
                              loadingScreen.style.display = 'none';
                            }
                            
                            // Animate hero elements in sequence
                            const directChangingWord = document.getElementById('changing-word');
                            if (directChangingWord) {
                              // Apply styles directly with smooth transition
                              directChangingWord.style.opacity = '0';
                              directChangingWord.style.visibility = 'visible';
                              directChangingWord.style.display = 'inline-block';
                              directChangingWord.style.transform = 'translateY(10px)';
                              directChangingWord.style.transition = 'opacity 0.4s ease-out, transform 0.4s cubic-bezier(0.19, 1, 0.22, 1)';
                              
                              // Apply gradient directly
                              directChangingWord.style.background = 'linear-gradient(90deg, #8b5cf6, #ec4899, #facc15)';
                              directChangingWord.style.backgroundSize = '200% auto';
                              directChangingWord.style.backgroundClip = 'text';
                              directChangingWord.style.webkitBackgroundClip = 'text';
                              directChangingWord.style.webkitTextFillColor = 'transparent';
                              
                              // Fade in the changing word
                              setTimeout(() => {
                                directChangingWord.style.opacity = '1';
                                directChangingWord.style.transform = 'translateY(0)';
                                
                                // Start word cycling
                                setTimeout(() => {
                                  cycleWords();
                                }, 50);
                              }, 50);
                            }
                            
                            // Animate tagline with minimal delay
                            const tagline = document.querySelector('.tagline');
                            if (tagline) {
                              tagline.style.opacity = '0';
                              tagline.style.transform = 'translateY(10px)';
                              tagline.style.transition = 'opacity 0.4s ease-out, transform 0.4s cubic-bezier(0.19, 1, 0.22, 1)';
                              
                              setTimeout(() => {
                                tagline.style.opacity = '1';
                                tagline.style.transform = 'translateY(0)';
                              }, 100);
                            }
                            
                            // Animate CTA button
                            const ctaButton = document.querySelector('.cta-button');
                            if (ctaButton) {
                              ctaButton.style.opacity = '0';
                              ctaButton.style.transform = 'translateY(10px)';
                              ctaButton.style.transition = 'opacity 0.4s ease-out, transform 0.4s cubic-bezier(0.19, 1, 0.22, 1)';
                              
                              setTimeout(() => {
                                ctaButton.style.opacity = '1';
                                ctaButton.style.transform = 'translateY(0)';
                              }, 150);
                            }
                            
                            // Show scroll indicator last
                            const scrollIndicator = document.querySelector('.scroll-indicator');
                            if (scrollIndicator) {
                              scrollIndicator.style.opacity = '0';
                              scrollIndicator.style.transition = 'opacity 0.4s ease-out';
                              
                              setTimeout(() => {
                                scrollIndicator.style.opacity = '0.6';
                              }, 200);
                            }
                          }, 300);
                        }, 50);
                      }, 100);
                    });
                  } else {
                    // If welcome screen doesn't exist, go directly to hero
                    // Fade out loading screen
                    if (loadingScreen) {
                      loadingScreen.style.opacity = '0';
                      loadingScreen.style.transition = 'opacity 0.8s ease-in-out';
                    }
            
                    // After fade out animation completes, show hero with smooth transitions
                    setTimeout(() => {
                      if (loadingScreen) {
                        loadingScreen.style.display = 'none';
                      }
                      if (hero) {
                        hero.style.display = 'flex';
                        hero.style.opacity = '1';
                      }
                    }, 300);
                  }
                }, 50);
              });
            }
          } // End of completeTerminalAnimation function
        } // End of startTerminalAnimation function
      } // End of animateLoadingScreen function
  
  // Add mouse movement shimmer effect
  document.addEventListener('mousemove', function(e) {
    createShimmerOnMove(e);
  });

  setupSmoothScroll();
  
  // Adjust font size based on viewport width
  adjustFontSize();
  window.addEventListener('resize', adjustFontSize);
  
  // Cycle through different words/roles with a fluid animation and gradient effect
  function cycleWords() {
    let currentIndex = 0;
    
    // Ensure the changing word is visible from the start
    const changingWord = document.getElementById('changing-word');
    if (!changingWord) return;
    
    // Start with Shan Irshad
    changingWord.textContent = roles[0];
    changingWord.style.opacity = '1';
    changingWord.style.visibility = 'visible';
    
    // Apply initial gradient
    changingWord.style.background = 'linear-gradient(90deg, #8b5cf6, #ec4899, #facc15)';
    changingWord.style.backgroundSize = '200% auto';
    changingWord.style.backgroundClip = 'text';
    changingWord.style.webkitBackgroundClip = 'text';
    changingWord.style.webkitTextFillColor = 'transparent';
    
    // Gradient variations for each word
    const gradients = [
      'linear-gradient(90deg, #8b5cf6, #ec4899, #facc15)', // Purple to pink to yellow
      'linear-gradient(90deg, #3b82f6, #10b981, #8b5cf6)', // Blue to green to purple
      'linear-gradient(90deg, #f97316, #ec4899, #3b82f6)', // Orange to pink to blue
      'linear-gradient(90deg, #10b981, #facc15, #f97316)', // Green to yellow to orange
      'linear-gradient(90deg, #ec4899, #8b5cf6, #10b981)'  // Pink to purple to green
    ];
    
    // Function to apply gradient to text
    function applyGradient(index) {
      // Apply gradient directly to ensure it's visible
      changingWord.style.background = gradients[index];
      changingWord.style.backgroundSize = '200% auto';
      changingWord.style.backgroundClip = 'text';
      changingWord.style.webkitBackgroundClip = 'text';
      changingWord.style.webkitTextFillColor = 'transparent';
      
      // Keep the shimmer effect
      changingWord.className = 'gradient-text shimmer-effect';
    }
    
    // Function to cycle through words with smooth transitions
    function rotateText() {
      // Apply exit animation
      changingWord.style.opacity = '0';
      changingWord.style.transform = 'translateY(-5px)';
      changingWord.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
      
      setTimeout(() => {
        // Get next word
        currentIndex = (currentIndex + 1) % roles.length;
        
        // Update text content
        changingWord.textContent = roles[currentIndex];
        
        // Apply new gradient
        applyGradient(currentIndex);
        
        // Set up entrance position
        changingWord.style.transform = 'translateY(5px)';
        
        // Trigger entrance animation
        setTimeout(() => {
          changingWord.style.opacity = '1';
          changingWord.style.transform = 'translateY(0)';
        }, 10);
      }, 300);
    }
    
    // Start the rotation after initial display
    setInterval(rotateText, wordDisplayDuration);
  }
  
  // Create particles for background effect
  function createParticles() {
    const particleCount = 30;
    
    for (let i = 0; i < particleCount; i++) {
      const particle = document.createElement('div');
      particle.className = 'particle';
      
      // Random position
      const posX = Math.random() * 100;
      const posY = Math.random() * 100;
      particle.style.left = `${posX}%`;
      particle.style.top = `${posY}%`;
      
      // Random size
      const size = Math.random() * 3 + 1;
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      
      // Random opacity
      particle.style.opacity = Math.random() * 0.5 + 0.1;
      
      // Random animation duration
      const animDuration = Math.random() * 15 + 10;
      particle.style.animation = `float ${animDuration}s infinite ease-in-out`;
      
      // Random animation delay
      particle.style.animationDelay = `${Math.random() * 5}s`;
      
      particlesContainer.appendChild(particle);
    }
  }
  
  // Create shimmer effect on mouse move
  function createShimmerOnMove(e) {
    // Limit the frequency of shimmer creation
    if (Math.random() > 0.1) return;
    
    const shimmer = document.createElement('div');
    shimmer.className = 'shimmer';
    
    // Position at mouse coordinates
    shimmer.style.left = `${e.clientX}px`;
    shimmer.style.top = `${e.clientY}px`;
    
    // Random size
    const size = Math.random() * 2 + 1;
    shimmer.style.width = `${size}px`;
    shimmer.style.height = `${size}px`;
    
    // Add to container
    particlesContainer.appendChild(shimmer);
    
    // Remove after animation completes
    setTimeout(() => {
      shimmer.remove();
    }, 800);
  }
  
  // Adjust font size based on viewport width
  function adjustFontSize() {
    const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
    
    // Base font size adjustment
    if (vw < 768) {
      document.documentElement.style.fontSize = '14px';
    } else if (vw < 1024) {
      document.documentElement.style.fontSize = '16px';
    } else {
      document.documentElement.style.fontSize = '18px';
    }
  }
  
  // Setup smooth scroll behavior
  function setupSmoothScroll() {
    // For the CTA button and scroll indicator
    ctaButton.addEventListener('click', (e) => {
      e.preventDefault();
      
      // Scroll to next section or about section
      const aboutSection = document.querySelector('#about') || document.querySelector('section:nth-of-type(2)');
      if (aboutSection) {
        aboutSection.scrollIntoView({ behavior: 'smooth' });
      }
    });
    
    scrollIndicator.addEventListener('click', () => {
      const nextSection = document.querySelector('section:nth-of-type(2)');
      if (nextSection) {
        nextSection.scrollIntoView({ behavior: 'smooth' });
      } else {
        window.scrollBy({ 
          top: window.innerHeight, 
          behavior: 'smooth' 
        });
      }
    });
  }
  
  // Mouse movement shimmer effect is already set up above
  
  // Initialize particles for background effect
  createParticles();
  
  // Start word cycling
  cycleWords();
  
  // Function to cycle through words
  function cycleWords() {
    console.log('Word cycling started');
    let currentIndex = 0;
    
    // Apply gradient to the changing word
    function applyGradient(index) {
      const gradients = [
        'linear-gradient(90deg, #8b5cf6, #ec4899, #facc15)',
        'linear-gradient(90deg, #3b82f6, #06b6d4, #10b981)',
        'linear-gradient(90deg, #f43f5e, #f97316, #facc15)',
        'linear-gradient(90deg, #06b6d4, #10b981, #3b82f6)',
        'linear-gradient(90deg, #ec4899, #8b5cf6, #3b82f6)'
      ];
      
      if (changingWord) {
        changingWord.style.background = gradients[index % gradients.length];
        changingWord.style.backgroundSize = '200% auto';
        changingWord.style.backgroundClip = 'text';
        changingWord.style.webkitBackgroundClip = 'text';
        changingWord.style.webkitTextFillColor = 'transparent';
      }
    }
    
    // Function to update the displayed word
    function updateWord() {
      if (!changingWord) return;
      
      // Fade out
      changingWord.style.opacity = '0';
      
      setTimeout(() => {
        // Change text and apply new gradient
        changingWord.textContent = roles[currentIndex];
        applyGradient(currentIndex);
        
        // Fade in
        changingWord.style.opacity = '1';
        
        // Move to next word
        currentIndex = (currentIndex + 1) % roles.length;
      }, wordTransitionDuration);
    }
    
    // Initial update
    updateWord();
    
    // Set interval for cycling
    setInterval(updateWord, wordDisplayDuration);
  }
});
